-- QUESTION BASED PROJECT -- 
USE sakila;

-- QUESTION 1. 
-- 1. Write a query to retrieve the first name, 
-- last name, and email of all customers who live in "California."

SELECT customer.first_name, customer.last_name, 
customer.email FROM customer
LEFT JOIN  address ON customer.address_id = address.address_id
WHERE address.district = "California";

-- Question 2 
-- 2. List all films with their titles and rental durations 
-- where the rental duration is more than 5 days.
SELECT title, rental_duration 
FROM film WHERE rental_duration > 5; 

-- Question 3
-- 3. Find all actors whose last name starts with "D."
SELECT first_name, last_name 
FROM actor WHERE last_name LIKE "D%" ;


-- Question 4
-- 4. Display the total number of stores and their locations.
SELECT district,COUNT(store_id) AS number_of_stores
FROM store
JOIN address ON store.address_id = address.address_id
GROUP BY district; 

SELECT country.country,address.district, city.city, COUNT(store.store_id)
FROM store
JOIN address ON store.address_id = address.address_id 
JOIN city ON city.city_id = address.city_id
JOIN country ON country.country_id = city.country_id
GROUP BY 1,2,3
ORDER BY 3;


-- QUESTION 5
-- 5. Write a query to find the top 5 films based on their rental rate. 
-- Display the title, rental rate, and release year.

SELECT film.title, film.rental_rate, film.release_year
FROM film
ORDER BY film.rental_rate DESC 
LIMIT 5;


-- QUESTION 6 
-- 6. List the first name, last name, and total amount spent by each customer.
-- Sort the results by the total amount spent in descending order.

SELECT customer.first_name, customer.last_name, 
SUM(payment.amount) AS total_amount_spent
FROM customer
JOIN payment ON payment.customer_id = customer.customer_id
GROUP BY 1,2
ORDER BY 3 DESC ;


-- QUESTION 7
-- 7. Find the average rental duration of all films in the Sakila database

-- first way:
SELECT AVG(film.rental_duration) AS average_rental FROM film;



-- second way
SELECT  AVG(datediff(rental.return_date,payment.payment_date)) AS avg_rental_days
FROM rental
JOIN payment ON payment.rental_id = rental.rental_id;

-- third way
SELECT  AVG(datediff(rental.return_date,rental.rental_date)) AS avg_rental_days
FROM rental;



-- QUESTION 8
-- 8.Retrieve the list of customers who have rented more than 10 films. 
-- Display their first name, last name, and the number of rentals.

SELECT 
customer.first_name, customer.last_name,
COUNT(rental.rental_id) AS number_of_rentals
FROM customer
JOIN rental ON customer.customer_id = rental.customer_id 
GROUP BY 1,2
HAVING number_of_rentals > 10 
ORDER BY 3 ASC;



-- QUESTION 9
-- 9.	List all staff members along with the store they work at. 
-- Include the staff member's first name, last name, and the store address.
SELECT staff.first_name, staff.last_name, address.address
FROM staff 
LEFT JOIN store ON staff.store_id = store.store_id
JOIN address ON store.store_id = address.address_id;




-- QUESTION 10
-- 10.Write a query to display each customer’s rental history, 
-- including the title of the film, rental date, and return date.

SELECT customer.first_name, customer.last_name, 
film.title AS film_title, rental.rental_date, rental.return_date 
FROM customer 
JOIN rental ON rental.customer_id = customer.customer_id
JOIN inventory ON rental.inventory_id = inventory.inventory_id
JOIN film ON inventory.film_id = film.film_id 
ORDER BY customer.first_name ASC; -- Alphabetic order


-- QUESTION 11
-- 11. Find the number of films available in each category. 
-- Display the category name and the number of films
SELECT category.name AS category_name, 
COUNT(film_category.film_id) AS Number_of_films
FROM category 
JOIN film_category ON film_category.category_id = category.category_id
GROUP BY 1
ORDER BY 2 ASC;

-- QUESTION 12
-- 12. List customers who haven't rented any films in the last 6 months

-- my original way
SELECT customer.first_name, customer.last_name
FROM customer
JOIN rental ON rental.customer_id = customer.customer_id
Where TIMESTAMPDIFF(MONTH,rental.rental_date,"2006-03-03 00:00:00") > 6
GROUP BY 1,2;

-- after researching
SELECT customer.first_name, customer.last_name
FROM customer
LEFT JOIN rental ON customer.customer_id = rental.customer_id
	AND timestampdiff(month, rental.rental_date, "2006-03-03 00:00:00" ) > 6
    OR rental.rental_date IS NULL
GROUP BY 1,2;



-- QUESTION 13
-- 13.	Calculate the total revenue generated by each store.
--  Display the store's address and the total revenue.
SELECT store.store_id, address.address, 
SUM(payment.amount) as total_revenue
FROM store
JOIN address ON store.address_id = address.address_id
JOIN inventory ON inventory.store_id = store.store_id
JOIN rental ON rental.inventory_id = inventory.inventory_id
JOIN payment ON payment.rental_id = rental.rental_id
GROUP BY 1,2;




-- QUESTION 14
-- 14.	Find the films that have a replacement cost greater than $20. 
-- Display the film title, replacement cost, and rental rate
SELECT film.title, film.replacement_cost, film.rental_rate 
FROM film
WHERE film.replacement_cost > 20.00 ;


-- QUESTION 15
-- 15. Write a query to find the top 5 customers who have spent the most on rentals. 
-- Display their first name, last name, and the total amount spent
SELECT customer.first_name, customer.last_name,
SUM(payment.amount) AS total_amount_spent
FROM customer 
JOIN payment 
ON customer.customer_id = payment.customer_id
GROUP BY 1,2 
ORDER BY 3 desc;


-- QUESTION 16
-- 16. List the top 10 most frequently rented films. 
-- Display the film title and the number of times it has been rented.
SELECT film.title, COUNT(rental.rental_id) as total_rentals
FROM film
JOIN inventory
	ON inventory.film_id = film.film_id 
JOIN rental
	ON rental.inventory_id = inventory.inventory_id
GROUP BY 1
ORDER BY total_rentals DESC
LIMIT 10;




-- QUESTION 17
-- 17.	Find actors who have appeared in films across more than 3 different categories. 
-- Display the actor’s first name, last name, and the number of 
-- categories they have appeared in.

SELECT actor.first_name, actor.last_name, 
COUNT(film_category.category_id) as number_of_categories
FROM actor
JOIN film_actor 
	ON film_actor.actor_id = actor.actor_id 
JOIN film
	ON film_actor.film_id = film.film_id
JOIN film_category
	ON film_category.film_id = film.film_id
GROUP BY 1,2
HAVING number_of_categories>3  
ORDER BY number_of_categories ;


-- here I additionally show the category names, too
SELECT actor.first_name, actor.last_name, 
category.name,
COUNT(film_category.category_id) as number_of_categories
FROM actor
JOIN film_actor 
	ON film_actor.actor_id = actor.actor_id 
JOIN film
	ON film_actor.film_id = film.film_id
JOIN film_category
	ON film_category.film_id = film.film_id
JOIN category
	ON category.category_id = film_category.category_id
GROUP BY 1,2,3
HAVING number_of_categories>3  
ORDER BY 1;
	


-- QUESTION 18
-- 18.	Write a query to find the category that generates the highest revenue. 
-- Display the category name and the total revenue.
SELECT category.name, 
COUNT(payment.amount) as total_revenue
FROM category
JOIN film_category 
	ON category.category_id = film_category.category_id 
JOIN film
	ON film_category.film_id = film.film_id
JOIN inventory 
	ON inventory.film_id = film.film_id
JOIN rental
	ON rental.inventory_id = inventory.inventory_id
JOIN payment
	ON payment.rental_id = rental.rental_id
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1;


-- QUESTION 19
-- 19.	Create a report that shows each customer's spending by year.
-- Display the customer’s first name, last name, year, and the total amount spent

SELECT customer.first_name, customer.last_name, 
YEAR(rental.rental_date) AS "year",
SUM(payment.amount) AS 'Total Amount Spent'
FROM customer
JOIN payment
	ON payment.customer_id = customer.customer_id
JOIN rental
	ON rental.rental_id = payment.rental_id
GROUP BY 1,2,3
ORDER BY 1;






