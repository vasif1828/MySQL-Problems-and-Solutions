-- WINDOW FUNCTIONS QUESTIONS -- 

-- QUESTION 20. 
-- 20.List the top 10 films by rental rate, with their rank, in descending order.
SELECT title, rental_rate,
RANK() OVER (ORDER BY rental_rate DESC) AS Rental_Rate_Rank
FROM film 
ORDER BY rental_rate DESC
LIMIT 10;


-- QUESTION 21. 
-- 21.Calculate the percentile rank of each film based on the number of 
-- times it has been rented.

SELECT film.title, COUNT(rental.rental_id) as number_of_rentals,
PERCENT_RANK() OVER (ORDER BY COUNT(rental.rental_id)) 
	AS Perc_Rank_Film_Rentals
FROM film
JOIN inventory
	ON film.film_id = inventory.film_id
JOIN rental
	ON rental.inventory_id = inventory.inventory_id 
GROUP BY 1;

-- Solving with subqueries 
SELECT title, rental_counts, 
PERCENT_RANK() OVER (ORDER BY rental_counts)
FROM     
    (SELECT film.title , COUNT(rental.rental_id) as rental_counts
	FROM film
	JOIN inventory
		ON film.film_id = inventory.film_id
	JOIN rental
		ON rental.inventory_id = inventory.inventory_id 
	GROUP BY 1) AS film_rental_counts;

-- Solving with CTEs
WITH Rental_Counts AS (
	SELECT film.title ,
    COUNT(rental.rental_id) AS rental_counts
    FROM film
	JOIN inventory
		ON inventory.film_id = film.film_id
	JOIN rental
		ON rental.inventory_id = inventory.inventory_id
	GROUP BY 1
)
SELECT title, rental_counts,
PERCENT_RANK() OVER (ORDER BY rental_counts)
FROM Rental_Counts;



-- QUESTION 22. 
-- 22.	Calculate the cumulative revenue generated by each store


SELECT store.store_id, payment.amount,
SUM(amount) OVER (PARTITION BY store.store_id ORDER BY sum(amount)) AS Cumulative_Revenue
FROM payment
JOIN staff
	ON payment.staff_id = staff.staff_id
JOIN store
	ON store.store_id = staff.store_id
GROUP BY 1,2;



-- QUESTION 23
-- 23. Rank customers based on their total payment amount

-- SOLUTION WITH CTE
WITH RankedCustomers AS (
	SELECT customer.first_name, customer.last_name, 
    SUM(payment.amount) AS total_payment 
    FROM customer 
    JOIN payment
		ON payment.customer_id = customer.customer_id 
	GROUP BY 1,2
)
SELECT first_name, last_name, total_payment, 
RANK() OVER (ORDER BY total_payment DESC)  AS rank_total_payment
FROM RankedCustomers;

-- SIMPLE SOLUTION
SELECT customer.first_name, customer.last_name, SUM(payment.amount) AS total_payment ,
RANK() OVER (ORDER BY SUM(payment.amount) DESC)  AS rank_total_payment
FROM customer 
    JOIN payment
		ON payment.customer_id = customer.customer_id
GROUP BY 1,2;

use sakila;
-- QUESTION 24
-- 24. Identify gaps in rental durations for each film

SELECT film.film_id, rental.rental_date AS rental_start_date, 
rental.return_date AS rental_end_date
FROM film
JOIN inventory
	ON film.film_id = inventory.film_id
JOIN rental
	ON inventory.inventory_id = rental.inventory_id
GROUP BY 1,2,3
ORDER BY 1;


-- ADD previous_rental_enddate column to the table
WITH RentalDates AS (
	SELECT film.film_id, rental.rental_date AS rental_start_date, 
	rental.return_date AS rental_end_date
	FROM film
	JOIN inventory
		ON film.film_id = inventory.film_id
	JOIN rental
		ON inventory.inventory_id = rental.inventory_id
	GROUP BY 1,2,3
	ORDER BY 1
),
DatesWithLag AS(
	SELECT film_id,
    rental_start_date,
    rental_end_date,
    LAG(rental_end_date) OVER (PARTITION BY film_id) AS previous_rental_enddate
    FROM RentalDates
)
SELECT film_id, rental_start_date,rental_end_date, previous_rental_enddate,
datediff(rental_start_date,previous_rental_enddate ) AS gap_duration
FROM DatesWithLag
WHERE datediff(rental_start_date,previous_rental_enddate ) > 0; 




WITH RentalDates AS (
	SELECT film.film_id, 
	rental.rental_date AS rental_start_date,
	rental.return_date AS rental_return_date
	FROM film 
	JOIN inventory
		ON inventory.film_id = film.film_id
	JOIN rental
		ON rental.inventory_id = inventory.inventory_id
	ORDER BY 1,2
),
DatesWIthLag AS (
	SELECT film_id, 
    rental_start_date,
    rental_return_date,
    LAG(rental_return_date) OVER (PARTITION BY film_id ORDER BY rental_start_date) AS previous_rental_enddate
    FROM RentalDates
)
SELECT film_id, rental_start_date, rental_return_date, previous_rental_enddate,
datediff(rental_start_date,previous_rental_enddate) as gap_duration
FROM DatesWIthLag
where datediff(rental_start_date,previous_rental_enddate) > 0;



WITH RentalDates  AS(  
	SELECT film.film_id, rental.rental_date AS rental_start_date, 
	rental.return_date AS rental_end_date,
	LAG(return_date) OVER (PARTITION BY film_id ORDER BY rental_date) AS previous_rental_enddate
	FROM film 
		JOIN inventory
			ON inventory.film_id = film.film_id
		JOIN rental
			ON rental.inventory_id = inventory.inventory_id
	ORDER BY 1,2
)
SELECT film_id, rental_start_date, rental_end_date,
previous_rental_enddate, 
DATEDIFF(rental_start_date, previous_rental_enddate) as gap_duration
FROM RentalDates 
WHERE DATEDIFF(rental_start_date, previous_rental_enddate) > 0 ;














    
    
    
    
    
    
    
    

















